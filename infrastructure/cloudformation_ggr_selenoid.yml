Description: Selenoid stack Configuration
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Aws Configuration
        Parameters:
          - VpcId
          - AvailabilityZone
          - KeyName
      -
        Label:
          default: Selenoid Configuration
        Parameters:
          - SpotInstanceType

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    AllowedPattern: '.+'
    Default: 'vpc-0da42d2d682d0e16d'
    ConstraintDescription: Vpc Id parameter can't be empty
  KeyName:
    Type: String
    Default: 'dmytro'
    Description: Key Pair name fo ssh acces to instances
  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    AllowedPattern: '.+'
    Default: 'us-east-2c'
    ConstraintDescription: Availability Zone parameter can't be empty
  SpotInstanceType:
    Type: String
    Default: c5.xlarge
    Description: Choose instance type
  GgrInstanceType:
    Type: String
    Default: t2.micro
    Description: Choose instance type
  InstancesCount:
    Type: Number
    Default: 1
    MinValue: 1
    Description: Enter desired instances count
  SelenoidArgs:
    Type: String
    Default: -timeout 2m -cpu 1.0
    Description: https://aerokube.com/selenoid/latest/#_selenoid_cli_flags
  GgrArgs:
    Type: String
    Default: -guests-allowed
    Description: https://aerokube.com/ggr/latest/#_ggr_cli_flags
  GgrVersion:
    Type: String
    Default: '1.6.6'
    Description: https://github.com/aerokube/ggr/releases
  SelenoidVersion:
    Type: String
    Default: '1.10.0'
    Description: https://github.com/aerokube/selenoid/releases
  CmVersion:
    Type: String
    Default: '1.7.1'
    Description: https://github.com/aerokube/cm/releases
  Browsers:
    Type: String
    Default: 'chrome'
    Description: Browser names and versions in cm format(e.g. chrome:69;firefox:60;opera) - https://aerokube.com/cm/latest/#_downloading_only_some_browser_versions
  BrowsersLimit:
    Type: Number
    Default: 5
    MinValue: 1
    Description: Enter browsers count
  BrowserVersions:
    Type: Number
    Default: 5
    MinValue: 1
    Description: Used only for broswers without specified versions
  TmpfsSize:
    Type: Number
    Default: 512
    Description: Size of tmpfs partition

Resources:
  GgrSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'ggr security group'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8888
          ToPort: 8888
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 4444
          ToPort: 4444
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 'quota'
            - 'ggr'
        quota:
          files:
            /home/ubuntu/quota.py:
              content: !Sub |
                import json
                import logging
                import urllib.request
                from collections import defaultdict
                from xml.dom import minidom
                from xml.etree import ElementTree
                from xml.etree.ElementTree import SubElement, Element
                import boto3
                aws_region = '${AWS::Region}'
                ec2_tag_name = 'selenoid'
                selenoid_port = '4444'
                quota_dir_path = '/home/ubuntu/grid-router/quota/'
                guest_quota = 'guest.xml'
                logger = logging.getLogger('quota')
                handler = logging.FileHandler(quota_dir_path + 'quota.log')
                formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s : %(funcName)s(): %(lineno)d')
                handler.setFormatter(formatter)
                logger.addHandler(handler)
                logger.setLevel(logging.WARNING)
                # returns a dictionary with browser names, versions and overall count from all selenoid hosts
                def get_selenoid_configs(hosts):
                    browsers = defaultdict(defaultdict)
                    count = ''
                    for host in hosts:
                        try:
                            url = 'http://{}:{}/status'.format(host, selenoid_port)
                            with urllib.request.urlopen(url) as response:
                                config = json.loads(response.read().decode('utf-8'))
                        except IOError as error:
                            logger.error("Error getting selenoid status from {} : {}".format(host, error))
                            continue
                        count = str(config['total'])
                        for browser in config['browsers'].keys():
                            for version in config['browsers'][browser].keys():
                                if version not in browsers[browser]:
                                    browsers[browser][version] = []
                                    browsers[browser][version].append(host)
                                else:
                                    browsers[browser][version].append(host)
                    return {'browsers': browsers, 'count': count}
                def generate_quota_xml(configs):
                    config = configs['browsers']
                    count = configs['count']
                    root = Element('qa:browsers', attrib={'xmlns:qa': 'urn:config.gridrouter.qatools.ru'})
                    for browser_name in config:
                        versions = list(config[browser_name].keys())
                        latest_ver = max(versions)
                        browser = SubElement(root, 'browser', attrib={'name': browser_name, 'defaultVersion': latest_ver})
                        for ver in config[browser_name]:
                            version = SubElement(browser, 'version', attrib={'number': ver})
                            region = SubElement(version, 'region', attrib={'name': aws_region})
                            for host in config[browser_name][ver]:
                                SubElement(region, 'host', attrib={'name': host, 'port': selenoid_port, 'count': count})
                    return ElementTree.ElementTree(root)
                def get_selenoid_hosts(tag_name):
                    ec2 = boto3.resource('ec2', region_name=aws_region)
                    filters = [{'Name': 'tag:{}'.format(tag_name), 'Values': ['*']},
                               {'Name': 'instance-state-name', 'Values': ['running']}]
                    instances = ec2.instances.filter(Filters=filters)
                    selenoid_hosts = list()
                    for instance in list(instances):
                        selenoid_hosts.append(instance.private_ip_address)
                    return selenoid_hosts
                def main():
                    selenoid_hosts = get_selenoid_hosts(ec2_tag_name)
                    selenoid_configs = get_selenoid_configs(selenoid_hosts)
                    quota_xml = generate_quota_xml(selenoid_configs)
                    quota = minidom.parseString(ElementTree.tostring(quota_xml.getroot(), 'utf-8')).toprettyxml(indent=" ")
                    try:
                        with open('{}{}'.format(quota_dir_path, guest_quota), 'w') as quota_file:
                            quota_file.write(quota)
                    except OSError as error:
                        logger.error("Error writing guest quota file: {}".format(error))
                if __name__ == '__main__':
                    main()
              group: 'ubuntu'
              owner: 'ubuntu'
        ggr:
          files:
            /home/ubuntu/docker-compose.yaml:
              content: !Sub
                - |
                  version: '3'
                  services:
                    ggr:
                      container_name: ggr
                      restart: always
                      network_mode: bridge
                      image: aerokube/ggr:${GgrVersion}
                      volumes:
                        - "/home/ubuntu/grid-router/:/etc/grid-router:ro"
                      command: ["${Args}"]
                      ports:
                        - "4444:4444"
                    ggr-ui:
                      container_name: ggr-ui
                      restart: always
                      network_mode: bridge
                      image: aerokube/ggr-ui:latest-release
                      volumes:
                        - "/home/ubuntu/grid-router/:/etc/grid-router:ro"
                      ports:
                        - "8888:8888"
                    selenoid-ui:
                      container_name: selenoid-ui
                      restart: always
                      network_mode: bridge
                      image: "aerokube/selenoid-ui"
                      network_mode: bridge
                      links:
                        - ggr-ui
                      ports:
                        - "8080:8080"
                      command: ["-selenoid-uri", "http://ggr-ui:8888"]
                - Args: !Join [ '","', !Split [ " " , !Ref GgrArgs ] ]
              group: 'ubuntu'
              owner: 'ubuntu'
          commands:
            '1_create_quota_folder':
              command: 'sudo mkdir -p /home/ubuntu/grid-router/quota'
            '2_create_test_user_quota':
              command: 'echo "<qa:browsers xmlns:qa=\"urn:config.gridrouter.qatools.ru\"/>" | sudo tee -a /home/ubuntu/grid-router/quota/guest.xml'
            '3_create_quota_reload_cron_job':
              command: 'echo "* * * * * root /usr/bin/python3 /home/ubuntu/quota.py && docker kill -s HUP ggr >> /home/ubuntu/cron.log && docker kill -s HUP ggr-ui >> /home/ubuntu/cron.log" | sudo tee -a /etc/cron.d/quota'
            '4_start_ggr':
              cwd: '/home/ubuntu/'
              command: 'sudo docker-compose up -d'

  SelenoidSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'selenoid security group'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 4444
          ToPort: 4444
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 'selenoid'
        selenoid:
          files:
            /home/ubuntu/cm:
              source: !Sub https://github.com/aerokube/cm/releases/download/${CmVersion}/cm_linux_amd64
              group: 'ubuntu'
              owner: 'ubuntu'
              mode: 000770
          commands:
            '1_start_selenoid':
              cwd: '/home/ubuntu/'
              command: !Sub |
                sudo ./cm selenoid start -v ${SelenoidVersion} -t ${TmpfsSize} -b "${Browsers}" -l ${BrowserVersions} --vnc -c /home/ubuntu/.aerokube/selenoid -g "-limit ${BrowsersLimit} ${SelenoidArgs}"
            # '2_start_selenoid_ui':
            #    cwd: '/home/ubuntu/'
            #    command: sudo ./cm selenoid-ui start

  FleetRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - spotfleet.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::187745282791:policy/AmazonEC2SpotFleetRole
      Path: /

  SelenoidSpotFleet:
    Type: "AWS::EC2::SpotFleet"
    Properties:
      SpotFleetRequestConfigData:
        TargetCapacity: !Ref InstancesCount
        AllocationStrategy: 'lowestPrice'
        Type: 'request'
        IamFleetRole: !GetAtt FleetRole.Arn
        LaunchSpecifications:
          -
            ImageId: 'ami-02c19f5eac25574df'
            InstanceType: !Ref SpotInstanceType
            KeyName: !Ref KeyName
            SubnetId: 'subnet-0d9e37ad53d8485da'
            Placement:
              AvailabilityZone: !Ref AvailabilityZone
            SecurityGroups:
              -
                GroupId: !GetAtt SelenoidSecurityGroup.GroupId
            TagSpecifications:
              -
                ResourceType: 'instance'
                Tags:
                  -
                    Key: 'selenoid'
                    Value: 'guest'
                  -
                    Key: Name
                    Value: 'selenoid-node'
            UserData:
              'Fn::Base64':
                !Sub |
                #!/bin/bash -xe
                su ubuntu -c '/home/ubuntu/.local/bin/cfn-init -v --stack ${AWS::StackName} --resource SelenoidSecurityGroup --configsets default --region ${AWS::Region}'

  GgrSpotFleet:
    Type: "AWS::EC2::SpotFleet"
    Properties:
      SpotFleetRequestConfigData:
        TargetCapacity: 1
        AllocationStrategy: 'lowestPrice'
        Type: 'request'
        IamFleetRole: !GetAtt FleetRole.Arn
        LaunchSpecifications:
          -
            ImageId: 'ami-02c19f5eac25574df'
            InstanceType: !Ref GgrInstanceType
            IamInstanceProfile:
              Arn: !GetAtt GgrProfile.Arn
            KeyName: !Ref KeyName
            SubnetId: 'subnet-0d9e37ad53d8485da'
            Placement:
              AvailabilityZone: !Ref AvailabilityZone
            SecurityGroups:
              -
                GroupId: !GetAtt GgrSecurityGroup.GroupId
            TagSpecifications:
              -
                ResourceType: 'instance'
                Tags:
                  -
                    Key: Name
                    Value: 'ggr'
            UserData:
              'Fn::Base64':
                !Sub |
                #!/bin/bash -xe
                su ubuntu -c '/home/ubuntu/.local/bin/cfn-init -v --stack ${AWS::StackName} --resource GgrSecurityGroup --configsets default --region ${AWS::Region}'
                su ubuntu -c '/home/ubuntu/.local/bin/cfn-signal -e 0 --stack ${AWS::StackName} -d `curl http://169.254.169.254/latest/meta-data/public-ipv4` "${WaitHandle}"'


  GgrRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        -
          PolicyName: ggrPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - 'ec2:Describe*'
                Effect: 'Allow'
                Resource: "*"

  GgrProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        - !Ref GgrRole

  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref WaitHandle
      Timeout: 450
      Count: 1

Outputs:
  GgrSpotFleet:
    Value: !Ref GgrSpotFleet